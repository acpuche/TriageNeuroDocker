# Generated by: Neurodocker version 0.7.0+0.gdc97516.dirty
# Latest release: Neurodocker version 0.7.0
# Timestamp: 2021/03/30 20:21:31 UTC
#
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
#
#     https://github.com/ReproNim/neurodocker
# modified by https://github.com/acpuche, maintainer aura.puche@sanvicentefundacion.com

FROM debian:stretch

USER root

ARG DEBIAN_FRONTEND="noninteractive"

ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
		   dcmtk \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
		   mriconvert \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker

ENTRYPOINT ["/neurodocker/startup.sh"]

ENV FSLDIR="/opt/fsl-6.0.3" \
    PATH="/opt/fsl-6.0.3/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.3/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.3/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           sudo \
           wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FSL ..." \
    && mkdir -p /opt/fsl-6.0.3 \
    && curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.3-centos6_64.tar.gz \
    | tar -xz -C /opt/fsl-6.0.3 --strip-components 1 \
    && sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT \
    && sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT \
    && sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT \
    && sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT \
    && echo "Installing FSL conda environment ..." \
    && bash /opt/fsl-6.0.3/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.3

ENV CONDA_DIR="/opt/miniconda-latest" \
	PATH="/opt/miniconda-latest/bin:$PATH"
RUN export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda update -yq -nbase conda \
    && conda config --system --prepend channels conda-forge \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && sync && conda clean -y --all && sync \
    && conda install -y -q --name base \
	           "python=3.7" \
			   "scikit-learn=0.23.2" \
    && sync && conda clean -y --all && sync

ENV DCMTK_VERSION=dcmtk-3.6.6
ENV DCMTK_PREFIX=/opt/dcmtk365
ENV PATH=$PATH:${DCMTK_PREFIX}/bin:/opt
RUN apt-get update && apt-get install -y build-essential \
                                         cmake  \
                                         dcm2niix \
                                         pigz \
                                         wget \
                                         vim \
                                         libpng-dev \
                                         libtiff5-dev \
                                         libxml2-dev  \
                                         libjpeg62-turbo-dev \
                                         zlib1g-dev  \
                                         libwrap0-dev \
                                         libssl-dev
RUN wget http://dicom.offis.de/download/dcmtk/release/${DCMTK_VERSION}.tar.gz && \
    tar xzvf ${DCMTK_VERSION}.tar.gz && \
    cd ${DCMTK_VERSION} && \
    cmake -DCMAKE_INSTALL_PREFIX=${DCMTK_PREFIX} && \
    make all && \
    make install

RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "debian:stretch" \
    \n    ], \
    \n    [ \
    \n      "fsl", \
    \n      { \
    \n        "version": "6.0.3" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "dcmtk", \
    \n      { \
    \n        "version": "latest" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "create_env": "base", \
    \n        "conda_install": [ \
    \n          "python=3.7" \
    \n        ] \
    \n      } \
    \n    ] \
    \n  ] \
    \n}' > /neurodocker/neurodocker_specs.json

#Copy all the files from the project's root to the directory
COPY requirements.txt ./
RUN pip install -r requirements.txt
COPY src/ /src/
RUN ls -la /src/*

WORKDIR /src/
RUN chmod +x /src/main.sh
RUN chmod +x /src/main.py

ENTRYPOINT ["/bin/bash"]

LABEL org.nrg.commands="[{\"name\": \"xnat_triage\", \"label\": \"xnat_triage\", \"description\": \"Module/executable to prioritize patients according to the brain FLAIR image.\", \"version\": \"1.0\", \"schema-version\": \"1.0\", \"info-url\": \"--\", \"image\": \"xnat_triage:latest\", \"type\": \"docker\", \"command-line\": \"/src/main.sh /input /output\", \"mounts\": [{\"name\": \"input\", \"writable\": false, \"path\": \"/input\"}, {\"name\": \"output\", \"writable\": true, \"path\": \"/output\"}], \"environment-variables\": {}, \"ports\": {}, \"inputs\": [{\"name\": \"SESSION_ID\", \"description\": \"XNAT session ID\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"command-line-flag\": null, \"command-line-separator\": null, \"true-value\": null, \"false-value\": null}, {\"name\": \"SESSION_LABEL\", \"description\": \"XNAT session label\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"command-line-flag\": null, \"command-line-separator\": null, \"true-value\": null, \"false-value\": null}, {\"name\": \"PROJECT\", \"description\": \"XNAT project\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"command-line-flag\": null, \"command-line-separator\": null, \"true-value\": null, \"false-value\": null}, {\"name\": \"SCAN_ID\", \"description\": \"XNAT scan ID\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"command-line-flag\": null, \"command-line-separator\": null, \"true-value\": null, \"false-value\": null}, {\"name\": \"RESOURCE\", \"description\": \"Resource type: DICOM or NIFTI\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"command-line-flag\": null, \"command-line-separator\": null, \"true-value\": null, \"false-value\": null}], \"outputs\": [{\"name\": \"DATA\", \"description\": null, \"required\": false, \"mount\": \"output\", \"path\": \"freesurfer_output\", \"glob\": null}], \"xnat\": [{\"name\": \"xnat_triage-session\", \"label\": null, \"description\": \"Run xnat_triage from a scan\", \"contexts\": [\"xnat:imageSessionData\"], \"external-inputs\": [{\"name\": \"session\", \"description\": \"Input session\", \"type\": \"Session\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"provides-value-for-command-input\": null, \"provides-files-for-command-mount\": null, \"via-setup-command\": null, \"user-settable\": null, \"load-children\": true}], \"derived-inputs\": [{\"name\": \"session-label\", \"description\": \"Session label. Used as Freesurfer subject identifier.\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"provides-value-for-command-input\": \"SESSION_LABEL\", \"provides-files-for-command-mount\": null, \"user-settable\": null, \"load-children\": true, \"derived-from-wrapper-input\": \"session\", \"derived-from-xnat-object-property\": \"label\", \"via-setup-command\": null}, {\"name\": \"session-id\", \"description\": \"Session ID. Used to generate Freesurfer assessor ID.\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"provides-value-for-command-input\": \"SESSION_ID\", \"provides-files-for-command-mount\": null, \"user-settable\": null, \"load-children\": true, \"derived-from-wrapper-input\": \"session\", \"derived-from-xnat-object-property\": \"id\", \"via-setup-command\": null}, {\"name\": \"project-id\", \"description\": \"Project id\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"provides-value-for-command-input\": \"PROJECT\", \"provides-files-for-command-mount\": null, \"user-settable\": null, \"load-children\": true, \"derived-from-wrapper-input\": \"session\", \"derived-from-xnat-object-property\": \"project-id\", \"via-setup-command\": null}, {\"name\": \"scan\", \"description\": \"Input scan\", \"type\": \"Scan\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"provides-value-for-command-input\": null, \"provides-files-for-command-mount\": null, \"user-settable\": null, \"load-children\": true, \"derived-from-wrapper-input\": \"session\", \"derived-from-xnat-object-property\": null, \"via-setup-command\": null}, {\"name\": \"scan-id\", \"description\": \"Input scan ID\", \"type\": \"string\", \"matcher\": null, \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"provides-value-for-command-input\": \"SCAN_ID\", \"provides-files-for-command-mount\": null, \"user-settable\": null, \"load-children\": true, \"derived-from-wrapper-input\": \"scan\", \"derived-from-xnat-object-property\": \"id\", \"via-setup-command\": null}, {\"name\": \"resource\", \"description\": \"Input resource: DICOM or NIFTI\", \"type\": \"Resource\", \"matcher\": \"@.label  =~ /(NIFTI|DICOM)/i\", \"default-value\": null, \"required\": true, \"replacement-key\": null, \"sensitive\": null, \"provides-value-for-command-input\": \"RESOURCE\", \"provides-files-for-command-mount\": \"input\", \"user-settable\": null, \"load-children\": true, \"derived-from-wrapper-input\": \"scan\", \"derived-from-xnat-object-property\": \"label\", \"via-setup-command\": null}], \"output-handlers\": [{\"name\": \"data-resource\", \"accepts-command-output\": \"DATA\", \"via-wrapup-command\": null, \"as-a-child-of\": \"assessor\", \"type\": \"Resource\", \"label\": \"DATA\", \"format\": null}]}], \"reserve-memory\": 4500, \"limit-memory\": 4500}]"
